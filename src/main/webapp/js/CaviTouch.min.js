"use strict";window.CaviTouch=class t{static onPackageInstalled(){}static onPackageRemoved(){}static onPackageUpgraded(){}constructor(t,e){null!=t[0]&&(t=t[0]);let i="caviTouch",s="";if(null!=e&&e.hasOwnProperty("eventPrefix")&&(s=e.eventPrefix,i+="-"+e.eventPrefix),null==t.caviTouch||null==t.caviTouch[i]){null!=e&&(e.hasOwnProperty("preventDefault")||e.hasOwnProperty("stopPropagation"))&&console.log("preventDefault and stopPropagation options are now called preventDefaultEvents / stopPropagationEvents, and is an array of event types to prevent on. (move/up/down)"),this.settings={dragMinDistance:10,dragMaxTapRange:5,preventDefaultEvents:["move","up","down"],stopPropagationEvents:["up","down"],stopImmediatePropagationEvents:[],pointerTypes:["mouse","touch"],doubleTapDuration:200,swipeDuration:500,swipeDistance:20,longPressTimer:750,preventGhostMouse:!0,eventPrefix:"",debug:!1,maxDragFps:-1,coalescedEvents:!1,hooverEvents:!1};for(let t in e)e.hasOwnProperty(t)&&(this.settings[t]=e[t]);this.html=t,null==this.html.caviTouch&&(this.html.caviTouch={}),this.html.caviTouch[i]=this,this.activePointers={},this.hoverPointers={},this.lastTapTimestamp=-1,this.transform=null,this.enabled=!1,this.instanceName=i,this.registerHandlers(),this.enable()}else console.log("Already enabled cavitouch with prefix ["+s+"] on: ",t)}registerHandlers(){let e=this;function i(i){t.dispatchPointerEvents(i,function(t){e.handleEvent(t)}),t.dispatchIfCaptured(i)}window.PointerEvent?(this.html.addEventListener("pointerdown",function(i){t.dispatchPointerEvents(i,function(t){e.handleEvent(t)})}),this.settings.hooverEvents&&(this.html.addEventListener("pointerenter",function(s){e.html.addEventListener("pointermove",i),t.dispatchPointerEvents(s,function(t){e.handleEvent(t)})}),this.html.addEventListener("pointerleave",function(s){e.html.removeEventListener("pointermove",i),t.dispatchPointerEvents(s,function(t){e.handleEvent(t)})}))):(this.html.addEventListener("mousedown",function(i){t.dispatchPointerEvents(i,function(t){e.handleEvent(t)})}),this.html.addEventListener("touchstart",function(i){t.dispatchPointerEvents(i,function(t){e.handleEvent(t)})}))}enable(){this.enabled=!0}disable(){this.enabled=!1}handleEvent(e){let i=this;if(!this.enabled)return;if(-1===this.settings.pointerTypes.indexOf(e.pointerType))return;if(!this.settings.hooverEvents&&("enter"===e.type||"leave"===e.type))return;if(e.coalescedEvents=[],this.settings.coalescedEvents&&"move"===e.type&&null!=e.originalEvent.getCoalescedEvents&&e.originalEvent.getCoalescedEvents().forEach(function(t){let i=.5;null!=t.pressure&&"pen"===e.pointerType&&(i=t.pressure),e.coalescedEvents.push({identifier:e.identifier,type:e.type,pointerType:e.pointerType,position:{x:t.pageX,y:t.pageY},pressure:i,originalEvent:t})}),"up"===e.type&&"touch"===e.pointerType&&this.settings.preventGhostMouse)this.ghostPreventionData={time:Date.now()};else if("down"===e.type&&"mouse"===e.pointerType&&this.settings.preventGhostMouse&&null!=this.ghostPreventionData&&this.ghostPreventionData.time-Date.now()<100){try{e.originalEvent.preventDefault()}catch(t){}try{e.originalEvent.stopImmediatePropagation()}catch(t){}return void console.log("Prevented ghost event?",e,this.html)}let s=null,n=null;switch(e.type){case"enter":this.hoverPointers[e.identifier]=new CaviEvent(e,this.settings),n=this.hoverPointers[e.identifier],s=this.activePointers[e.identifier];break;case"leave":n=this.hoverPointers[e.identifier],delete this.hoverPointers[e.identifier],null!=n&&n.update(e),s=this.activePointers[e.identifier];break;case"down":this.activePointers[e.identifier]=new CaviEvent(e,this.settings),s=this.activePointers[e.identifier],n=this.hoverPointers[e.identifier],t.enableCapture(e.identifier,this);break;case"up":null!=(s=this.activePointers[e.identifier])&&s.update(e),delete this.activePointers[e.identifier],n=this.hoverPointers[e.identifier],t.disableCapture(e.identifier,this);break;case"move":null!=(s=this.activePointers[e.identifier])&&s.update(e),null!=(n=this.hoverPointers[e.identifier])&&n.update(e)}this.settings.hooverEvents||(n=null),this.settings.debug&&console.log(e,e.originalEvent.target,this.html,s,n);let a=Object.keys(this.activePointers).length;if(null!=s&&(s.numActivePointers=a),"enter"===e.type)null==s&&(this.trigger("caviHoverStart",n),n.hovering=!0);else if("leave"===e.type)null!=n&&n.hovering&&this.trigger("caviHoverStop",n);else if("down"===e.type)null!=n&&n.hovering&&(this.trigger("caviHoverStop",n),n.hovering=!1),null!=s&&(s.longPressTimerId=window.setTimeout(function(){i.trigger("caviLongpressTimeout",s)},this.settings.longPressTimer),a>=2&&null===this.transform&&(this.transform=new TransformEvent(s,this.activePointers,this.settings),this.transform.originalEvent=s.originalEvent,this.trigger("caviTransformStart",this.transform)));else if("move"===e.type){if(null!=n&&n.hovering)this.trigger("caviHover",n);else if(null!=s){if(s.hasDragged()&&(s.dragging=!0,this.trigger("caviDragStart",s)),-1!==s.longPressTimerId&&s.hasDraggedBeyondTapRange()&&(window.clearTimeout(s.longPressTimerId),s.longPressTimerId=-1),s.dragging)if(-1===this.settings.maxDragFps)this.trigger("caviDrag",s);else if(null==s.animationFrameId){let t=this;s.animationFrameId=requestAnimationFrame(function(i){i-s.lastDragTimestamp>=1e3/t.settings.maxDragFps-.1&&(null==s.savedDragEvent?s.savedDragEvent=s.clone():s.savedDragEvent.update(e),t.trigger("caviDrag",s.savedDragEvent),s.lastDragTimestamp=i),s.animationFrameId=null})}a>=2&&null!==this.transform&&(this.transform.update(s,this.activePointers),this.trigger("caviTransform",this.transform))}}else if("up"===e.type){if(null!=s){if(-1!==s.longPressTimerId&&(window.clearTimeout(s.longPressTimerId),s.longPressTimerId=-1),s.dragging&&(this.trigger("caviDragStop",s),s.savedDragEvent=null,s.lastDragTimestamp=-1),s.hasDraggedBeyondTapRange()||(Date.now()-s.pointerDownTimestamp>this.settings.longPressTimer?this.trigger("caviLongpress",s):Date.now()-this.lastTapTimestamp<=this.settings.doubleTapDuration?this.trigger("caviDoubleTap",s):(this.trigger("caviTap",s),this.lastTapTimestamp=Date.now())),!s.swiped){let t=s.getSwipe();null!==t&&(s.swiped=!0,this.trigger("caviSwipe"+t,s))}1===a&&(this.trigger("caviTransformStop",this.transform),this.transform=null)}null!=n&&(this.trigger("caviHoverStart",n),n.hovering=!0)}if(this.settings.preventDefaultEvents.includes(e.type))try{e.originalEvent.preventDefault(),this.settings.debug&&console.log("preventDefault",this.html)}catch(t){console.log("Error: ",t)}if(this.settings.stopPropagationEvents.includes(e.type))try{e.originalEvent.stopPropagation(),this.settings.debug&&console.log("stopPropagation",this.html)}catch(t){console.log("Error: ",t)}if(this.settings.stopImmediatePropagationEvents.includes(e.type))try{e.originalEvent.stopImmediatePropagation(),this.settings.debug&&console.log("stopImmediatePropagation",this.html)}catch(t){console.log("Error: ",t)}}trigger(t,e){let i={type:t,caviEvent:e,originalEvent:e.originalEvent},s=this.settings.eventPrefix;s.length>0&&(t=s+"."+t);let n=new CustomEvent(t,{detail:i});this.settings.debug&&console.log("Triggering: ",n,this.html),this.html.dispatchEvent(n)}static getCaptures(e){let i=t.caviTouchCaptures[e];return Array.isArray(i)?i:[]}static enableCapture(e,i){null==t.caviTouchCaptures[e]&&(t.caviTouchCaptures[e]=[]),t.caviTouchCaptures[e].includes(i)?console.log("Trying to capture already captured cavitouch on: ",i.html):t.caviTouchCaptures[e].push(i)}static disableCapture(e,i){null!=t.caviTouchCaptures[e]&&t.caviTouchCaptures[e].splice(t.caviTouchCaptures[e].indexOf(i),1)}static dispatchPointerEvents(e,i){if(e.type.startsWith("mouse"))i.call(null,{identifier:0,type:e.type.substring(5),pointerType:"mouse",pageX:e.pageX,pageY:e.pageY,originalEvent:e,pressure:.5});else if(e.type.startsWith("pointer"))i.call(null,{identifier:e.pointerId,type:e.type.substring(7),pointerType:e.pointerType,pageX:e.pageX,pageY:e.pageY,originalEvent:e,pressure:e.pressure});else if(e.type.startsWith("touch")){let s="n/a";switch(e.type){case"touchstart":s="down";break;case"touchmove":s="move";break;case"touchend":case"touchcancel":s="up"}Array.from(e.changedTouches).forEach(function(n){let a="touch";if(null!=n.touchType)switch(n.touchType){case"direct":a="touch";break;case"stylus":a="pen";break;default:console.log("Unknown touchType: ",event.touchType)}let o=.5;null!=n.force&&"pen"===a&&(o=n.force),"down"===s&&i.call(null,{identifier:n.identifier,type:"enter",pointerType:a,pageX:n.pageX,pageY:n.pageY,originalEvent:e,pressure:o});let r=t.getCaptures(n.identifier).slice();i.call(null,{identifier:n.identifier,type:s,pointerType:a,pageX:n.pageX,pageY:n.pageY,originalEvent:e,pressure:o}),"up"===s&&r.forEach(function(t){t.handleEvent({identifier:n.identifier,type:"leave",pointerType:a,pageX:n.pageX,pageY:n.pageY,originalEvent:e,pressure:o})})})}}static dispatchIfCaptured(e){try{null!=window.parent&&window.parent!==window&&null!=window.parent.CaviTouch&&window.parent.CaviTouch.dispatchIfCaptured(e)}catch(t){}t.dispatchPointerEvents(e,function(e){t.getCaptures(e.identifier).forEach(function(t){t.handleEvent(e)})})}},window.TransformEvent=class t{constructor(e,i,s){this.originalEvent=e.originalEvent,this.settings=s,this.scale=1,this.rotation=0,this.position=t.calculateCenter(i),this.lastPosition=this.position,this.deltaPosition={x:0,y:0},this.startDistance=t.calculateDistance(i),this.startAngle=t.calculateAngle(i),this.update(e,i,!0)}update(e,i,s=!1){this.numPointers=Object.keys(i).length,this.position=t.calculateCenter(i),s&&(this.startPosition=this.position),this.avgDistanceToCenter=t.calculateAvgDistanceToCenter(this.position,i);let n=t.calculateDistance(i);this.scale=n/this.startDistance;let a=t.calculateAngle(i);this.rotation=a-this.startAngle,this.deltaPosition={x:this.position.x-this.lastPosition.x,y:this.position.y-this.lastPosition.y},this.lastPosition=this.position}static calculateDistance(t){let e=Object.keys(t),i=t[e[0]],s=t[e[1]];return Math.sqrt(Math.pow(i.position.x-s.position.x,2)+Math.pow(i.position.y-s.position.y,2))}static calculateAngle(t){let e=Object.keys(t),i=t[e[0]],s=t[e[1]],n=s.position.x-i.position.x,a=s.position.y-i.position.y;return 180*Math.atan2(a,n)/Math.PI}static calculateAvgDistanceToCenter(t,e){let i=0;for(let s in e)if(e.hasOwnProperty(s)){let n=e[s];i+=Math.sqrt(Math.pow(t.x-n.position.x,2)+Math.pow(t.y-n.position.y,2))}return i/=Object.keys(e).length}static calculateCenter(t){let e=999999,i=0,s=999999,n=0;for(let a in t)if(t.hasOwnProperty(a)){let o=t[a];e=Math.min(e,o.position.x),s=Math.min(s,o.position.y),i=Math.max(i,o.position.x),n=Math.max(n,o.position.y)}return{x:(e+i)/2,y:(s+n)/2}}},window.CaviEvent=class t{constructor(t,e){this.originalEvent=t.originalEvent,this.settings=e,this.identifier=t.identifier,this.coalescedEvents=t.coalescedEvents,this.position={x:t.pageX,y:t.pageY},this.startPosition=this.position,this.lastPosition=this.position,this.lastDragTimestamp=-1,this.savedDragEvent=null,this.deltaPosition={x:0,y:0},this.pointerDownTimestamp=Date.now(),this.longPressTimerId=-1,this.transform=null,this.pressure=.5,t.hasOwnProperty("pressure")&&(this.pressure=t.pressure),this.pointerType=t.pointerType,this.type=t.type,this.dragging=!1,this.swiped=!1,this.hovering=!1}clone(){let e=new t({originalEvent:this.originalEvent,identifier:this.identifier,pageX:this.position.x,pageY:this.position.y,pressure:this.pressure,pointerType:this.pointerType,type:this.type},this.settings);return e.numActivePointers=this.numActivePointers,e.coalescedEvents=this.coalescedEvents,e.deltaPosition={x:this.deltaPosition.x,y:this.deltaPosition.y},e.lastPosition={x:this.lastPosition.x,y:this.lastPosition.y},e}update(t){this.originalEvent=t.originalEvent,this.numActivePointers=t.numActivePointers,this.coalescedEvents=t.coalescedEvents,this.position={x:t.pageX,y:t.pageY},this.deltaPosition={x:this.position.x-this.lastPosition.x,y:this.position.y-this.lastPosition.y},this.type=t.type,t.hasOwnProperty("pressure")&&(this.pressure=t.pressure),this.lastPosition=this.position}hasDragged(){return!this.dragging&&(Math.abs(this.position.x-this.startPosition.x)>this.settings.dragMinDistance||Math.abs(this.position.y-this.startPosition.y)>this.settings.dragMinDistance)}hasDraggedBeyondTapRange(){return Math.abs(this.position.x-this.startPosition.x)>this.settings.dragMaxTapRange||Math.abs(this.position.y-this.startPosition.y)>this.settings.dragMaxTapRange}getSwipe(){let t=this;if(Date.now()-this.pointerDownTimestamp>this.settings.swipeDuration)return null;let e={x:this.startPosition.x-this.position.x,y:this.startPosition.y-this.position.y};function i(e){return Math.abs(e)>t.settings.swipeDistance}return Math.abs(e.x)>Math.abs(e.y)?i(e.x)?e.x<0?"Right":"Left":null:i(e.y)?e.y<0?"Down":"Up":null}},CaviTouch.caviTouchCaptures=[],window.PointerEvent?(document.addEventListener("pointermove",CaviTouch.dispatchIfCaptured),document.addEventListener("pointerup",CaviTouch.dispatchIfCaptured)):(document.addEventListener("mousemove",CaviTouch.dispatchIfCaptured),document.addEventListener("mouseup",CaviTouch.dispatchIfCaptured),document.addEventListener("touchmove",CaviTouch.dispatchIfCaptured),document.addEventListener("touchend",CaviTouch.dispatchIfCaptured),document.addEventListener("touchcancel",CaviTouch.dispatchIfCaptured));